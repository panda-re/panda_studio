openapi: "3.0.2"
info:
  title: PANDA Studio API
  version: "0.1"
servers:
  - url: http://localhost:8080/api
    description: Development server
paths:
  # todo: create image, delete image, update image
  /images:
    get:
      tags:
        - image
      summary: Finds all Images
      operationId: findAllImages
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
    post:
      tags:
        - image
      summary: Creates new Image
      operationId: createImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImageRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
  /images/{imageId}:
    get:
      tags:
        - image
      summary: Get image with specified ID
      operationId: findImageById
      parameters:
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    put:
      tags:
        - image
      summary: Update image
      operationId: updateImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImageRequest"
      parameters:
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      tags:
        - image
      summary: Delete image with specified ID
      operationId: deleteImageById
      parameters:
        - $ref: "#/components/parameters/ImageId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
  /images/{imageId}/files:
    post:
      tags:
        - image
        - file
      summary: Create new image file
      operationId: createImageFile
      parameters:
        - $ref: "#/components/parameters/ImageId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateImageFileRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageFile"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "409":
          $ref: "#/components/responses/ConflictResponse"
  /images/{imageId}/files/{fileId}:
    get:
      tags:
        - image
        - file
      summary: Download image file
      operationId: downloadImageFile
      parameters:
        - $ref: "#/components/parameters/ImageId"
        - $ref: "#/components/parameters/FileId"
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    post:
      tags:
        - image
        - file
      summary: Derive new image
      operationId: createDerivedImage
      parameters:
        - $ref: "#/components/parameters/ImageId"
        - $ref: "#/components/parameters/FileId"
        //TODO add other paramters
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DeriveImageFileRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "409":
          $ref: "#/components/responses/ConflictResponse"
    delete:
      tags:
        - image
        - file
      summary: Delete image file
      operationId: deleteImageFile
      parameters:
        - $ref: "#/components/parameters/ImageId"
        - $ref: "#/components/parameters/FileId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageFile"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
  /recordings:
    get:
      tags:
        - recording
      summary: Finds all Recordings
      operationId: findAllRecordings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recording"
    post:
      tags:
        - recording
      summary: Creates new Recording
      operationId: createRecording
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRecordingRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recording"
  /recordings/{recordingId}:
    get:
      tags:
        - recording
      summary: Get recording with specified ID
      operationId: findRecordingById
      parameters:
        - $ref: "#/components/parameters/RecordingId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recording"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      tags:
        - recording
      summary: Delete recording with specified ID
      operationId: deleteRecordingById
      parameters:
        - $ref: "#/components/parameters/RecordingId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recording"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
  /programs:
    get:
      tags:
        - program
      summary: Find all Interaction Programs
      operationId: findAllPrograms
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InteractionProgram"
    post:
      tags:
        - program
      summary: Create new Interaction Program
      operationId: createProgram
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProgramRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InteractionProgram"
  /programs/{programId}:
    get:
      tags:
        - program
      summary: Get Interaction Program with specified ID
      operationId: findProgramById
      parameters:
        - $ref: "#/components/parameters/ProgramId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InteractionProgram"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    put:
      tags:
        - program
      summary: Update Interaction Program with specified ID
      operationId: updateProgramById
      parameters:
        - $ref: "#/components/parameters/ProgramId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProgramRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InteractionProgram"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
    delete:
      tags:
        - program
      summary: Delete Interaction Program with specified ID
      operationId: deleteProgramById
      parameters:
        - $ref: "#/components/parameters/ProgramId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InteractionProgram"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
components:
  parameters:
    ImageId:
      name: imageId
      in: path
      description: ID of image
      required: true
      schema:
        type: string
    FileId:
      name: fileId
      in: path
      description: ID of file
      required: true
      schema:
        type: string
    RecordingId:
      name: recordingId
      in: path
      description: ID of recording
      required: true
      schema:
        type: string
    ProgramId:
      name: programId
      in: path
      description: ID of program
      required: true
      schema:
        type: string
  responses:
    NotFoundResponse:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ConflictResponse:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
            details:
              type: string
    Image:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        files:
          type: array
          items:
            $ref: "#/components/schemas/ImageFile"
        config:
          $ref: "#/components/schemas/PandaConfig"

    ImageFile:
      type: object
      properties:
        id:
          type: string
        file_name:
          type: string
        file_type:
          $ref: "#/components/schemas/ImageFileType"
        size:
          type: integer
        sha256:
          type: string
    
    ImageFileType:
      type: string
      enum: [qcow2, dtb, kernel]

    RecordingFileType:
      type: string
      enum: [ snp, ndlog ]

    PandaConfig:
      # todo: define this schema
      type: object
    
    CreateImageRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        config:
          $ref: "#/components/schemas/PandaConfig"

    CreateImageFileRequest:
      type: object
      properties:
        file_name:
          type: string
        file_type:
          $ref: "#/components/schemas/ImageFileType"
        file:
          type: string
          format: binary
    
    Recording:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        imageId:
          type: string
        recordingFiles:
          type: array
          items:
            $ref: "#/components/schemas/RecordingFile"

    RecordingFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        file_type:
          $ref: "#/components/schemas/RecordingFileType"
        size:
          type: integer
        sha256:
          type: string

    CreateRecordingRequest:
      type: object
      properties:
        name:
          type: string
        imageId:
          type: string
        interactionId:
          type: string
        config:
          $ref: "#/components/schemas/PandaConfig"

    CreateRecordingFileRequest:
      type: object
      properties:
        name:
          type: string
        recordingId:
          type: string
        file:
          type: string
          format: binary

    InteractionProgram:
      type: object
      properties:
        id: 
          type: string
        name:
          type: string
        instructions:
          type: array
          items:
            $ref: "#/components/schemas/InteractionProgramInstruction"
    
    CreateProgramRequest:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: array
          items:
            $ref: "#/components/schemas/InteractionProgramInstruction"
    
    UpdateProgramRequest:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: array
          items:
            $ref: "#/components/schemas/InteractionProgramInstruction"
    
    InteractionProgramInstruction:
      oneOf:
        - $ref: "#/components/schemas/RunCommandInstruction"
        - $ref: "#/components/schemas/StartRecordingInstruction"
        - $ref: "#/components/schemas/StopRecordingInstruction"
      discriminator:
        propertyName: "type"
        mapping:
          command: "#/components/schemas/RunCommandInstruction"
          start_recording: "#/components/schemas/StartRecordingInstruction"
          stop_recording: "#/components/schemas/StopRecordingInstruction"
          filesystem: "#/components/schemas/FilesystemInstruction"
          network: "#/components/schemas/NetworkInstruction"
    
    RunCommandInstruction:
      type: object
      required:
        - type
        - command
      properties:
        type:
          type: string
        command:
          type: string
    
    StartRecordingInstruction:
      type: object
      required:
        - type
        - recording_name
      properties:
        type:
          type: string
        recording_name:
          type: string
    
    StopRecordingInstruction:
      type: object
      required:
        - type
      properties:
        type:
          type: string

    FilesystemInstruction:
      type: object
      required:
        - type
      properties:
        type:
          type: string

    NetworkInstruction:
      type: object
      required:
        - type
        - sock_type
        - port
        - packet_type
        - packet_data
      properties:
        type:
          type: string
        sock_type:
          type: string
        port:
          type: int
        packet_type:
          type: string
        packet_data:
          type: string